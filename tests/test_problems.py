import numpy as np
import networkx as nx

from QHyper.problems import KnapsackProblem, TSPProblem, CommunityDetectionProblem, Network
from QHyper.problems.knapsack import Item

np.random.seed(1244)


def test_knapsack():
    problem = KnapsackProblem(max_weight=2, items=[(1, 2), (1, 2), (1, 1)])

    assert problem.knapsack.items == [
        Item(weight=1, value=2), Item(weight=1, value=2),
        Item(weight=1, value=1)
    ]

    assert problem.objective_function == {
        ('x0',): -2, ('x1',): -2, ('x2',): -1}

    assert [constraint.lhs for constraint in problem.constraints] == [
        {('x3',): -1, ('x4',): -1, (): 1},
        {('x0',): -1, ('x1',): -1, ('x2',): -1, ('x3',): 1, ('x4',): 2}
    ]


def test_TSP():
    problem = TSPProblem(number_of_cities=4, cities_coords=[(0, 0), (0, 3), (4, 0), (4, 3)])
    assert problem.objective_function == {
        ('x0', 'x15'): 1.0,
        ('x0', 'x7'): 1.0,
        ('x1', 'x14'): 1.0,
        ('x1', 'x6'): 1.0,
        ('x11', 'x4'): 1.0,
        ('x10', 'x5'): 1.0,
        ('x11', 'x12'): 1.0,
        ('x12', 'x3'): 1.0,
        ('x15', 'x8'): 1.0,
        ('x13', 'x2'): 1.0,
        ('x2', 'x5'): 1.0,
        ('x3', 'x4'): 1.0,
        ('x6', 'x9'): 1.0,
        ('x7', 'x8'): 1.0,
        ('x10', 'x13'): 1.0,
        ('x14', 'x9'): 1.0,
        ('x1', 'x15'): 0.8,
        ('x0', 'x14'): 0.8,
        ('x11', 'x13'): 0.8,
        ('x0', 'x6'): 0.8,
        ('x1', 'x7'): 0.8,
        ('x2', 'x4'): 0.8,
        ('x10', 'x12'): 0.8,
        ('x10', 'x4'): 0.8,
        ('x11', 'x5'): 0.8,
        ('x13', 'x3'): 0.8,
        ('x12', 'x2'): 0.8,
        ('x3', 'x5'): 0.8,
        ('x6', 'x8'): 0.8,
        ('x7', 'x9'): 0.8,
        ('x15', 'x9'): 0.8,
        ('x14', 'x8'): 0.8,
        ('x0', 'x13'): 0.6,
        ('x0', 'x5'): 0.6,
        ('x1', 'x12'): 0.6,
        ('x1', 'x4'): 0.6,
        ('x10', 'x15'): 0.6,
        ('x10', 'x7'): 0.6,
        ('x11', 'x14'): 0.6,
        ('x12', 'x9'): 0.6,
        ('x11', 'x6'): 0.6,
        ('x13', 'x8'): 0.6,
        ('x14', 'x3'): 0.6,
        ('x15', 'x2'): 0.6,
        ('x2', 'x7'): 0.6,
        ('x3', 'x6'): 0.6,
        ('x4', 'x9'): 0.6,
        ('x5', 'x8'): 0.6,
    }

    assert [constraint.lhs for constraint in problem.constraints] == [
        {('x0',): -1, ('x4',): -1, ('x8',): -1, ('x12',): -1, (): 1},
        {('x1',): -1, ('x5',): -1, ('x9',): -1, ('x13',): -1, (): 1},
        {('x2',): -1, ('x6',): -1, ('x10',): -1, ('x14',): -1, (): 1},
        {('x3',): -1, ('x7',): -1, ('x11',): -1, ('x15',): -1, (): 1},
        {('x0',): -1, ('x1',): -1, ('x2',): -1, ('x3',): -1, (): 1},
        {('x4',): -1, ('x5',): -1, ('x6',): -1, ('x7',): -1, (): 1},
        {('x8',): -1, ('x9',): -1, ('x10',): -1, ('x11',): -1, (): 1},
        {('x12',): -1, ('x13',): -1, ('x14',): -1, ('x15',): -1, (): 1}
    ]

def test_CDP():
    G = nx.barbell_graph(3, 1)
    problem = CommunityDetectionProblem(Network(G), 2)

    assert problem.objective_function.as_dict() == {
        ('s0', 's2'): -0.75, ('s2', 's0'): -0.75, 
        ('s1', 's3'): -0.75, ('s3', 's1'): -0.75, 
        ('s0', 's4'): -0.625, ('s4', 's0'): -0.625, 
        ('s1', 's5'): -0.625, ('s5', 's1'): -0.625, 
        ('s0', 's6'): 0.375, ('s6', 's0'): 0.375, 
        ('s1', 's7'): 0.375, ('s7', 's1'): 0.375, 
        ('s0', 's8'): 0.25, ('s8', 's0'): 0.25, 
        ('s1', 's9'): 0.25, ('s9', 's1'): 0.25, 
        ('s0', 's10'): 0.25, ('s10', 's0'): 0.25, 
        ('s1', 's11'): 0.25, ('s11', 's1'): 0.25, 
        ('s0', 's12'): 0.25, ('s12', 's0'): 0.25, 
        ('s1', 's13'): 0.25, ('s13', 's1'): 0.25, 
        ('s2', 's4'): -0.625, ('s4', 's2'): -0.625, 
        ('s3', 's5'): -0.625, ('s5', 's3'): -0.625, 
        ('s2', 's6'): 0.375, ('s6', 's2'): 0.375, 
        ('s3', 's7'): 0.375, ('s7', 's3'): 0.375, 
        ('s2', 's8'): 0.25, ('s8', 's2'): 0.25, 
        ('s3', 's9'): 0.25, ('s9', 's3'): 0.25, 
        ('s2', 's10'): 0.25, ('s10', 's2'): 0.25, 
        ('s3', 's11'): 0.25, ('s11', 's3'): 0.25, 
        ('s2', 's12'): 0.25, ('s12', 's2'): 0.25, 
        ('s3', 's13'): 0.25, ('s13', 's3'): 0.25, 
        ('s4', 's6'): 0.5625, ('s6', 's4'): 0.5625, 
        ('s5', 's7'): 0.5625, ('s7', 's5'): 0.5625, 
        ('s4', 's8'): 0.375, ('s8', 's4'): 0.375, 
        ('s5', 's9'): 0.375, ('s9', 's5'): 0.375, 
        ('s4', 's10'): 0.375, ('s10', 's4'): 0.375, 
        ('s5', 's11'): 0.375, ('s11', 's5'): 0.375, 
        ('s4', 's12'): -0.625, ('s12', 's4'): -0.625, 
        ('s5', 's13'): -0.625, ('s13', 's5'): -0.625, 
        ('s6', 's8'): -0.625, ('s8', 's6'): -0.625, 
        ('s7', 's9'): -0.625, ('s9', 's7'): -0.625, 
        ('s6', 's10'): -0.625, ('s10', 's6'): -0.625, 
        ('s7', 's11'): -0.625, ('s11', 's7'): -0.625, 
        ('s6', 's12'): -0.625, ('s12', 's6'): -0.625, 
        ('s7', 's13'): -0.625, ('s13', 's7'): -0.625, 
        ('s8', 's10'): -0.75, ('s10', 's8'): -0.75, 
        ('s9', 's11'): -0.75, ('s11', 's9'): -0.75, 
        ('s8', 's12'): 0.25, ('s12', 's8'): 0.25, 
        ('s9', 's13'): 0.25, ('s13', 's9'): 0.25, 
        ('s10', 's12'): 0.25, ('s12', 's10'): 0.25, 
        ('s11', 's13'): 0.25, ('s13', 's11'): 0.25
    }

    assert [constraint.as_dict() for constraint in problem.constraints] == [
        {('s0',): 1, ('s1',): 1, (): -1}, 
        {('s2',): 1, ('s3',): 1, (): -1}, 
        {('s4',): 1, ('s5',): 1, (): -1}, 
        {('s6',): 1, ('s7',): 1, (): -1}, 
        {('s8',): 1, ('s9',): 1, (): -1}, 
        {('s10',): 1, ('s11',): 1, (): -1}, 
        {('s12',): 1, ('s13',): 1, (): -1}
     ]
    
    problem_no_one_hot = CommunityDetectionProblem(Network(G), 2, False)

    assert problem_no_one_hot.objective_function.as_dict() == {
        ('x0', 'x0'): 0.25, ('x0', 'x1'): -0.75, 
        ('x0', 'x2'): -0.625, ('x0', 'x3'): 0.375, 
        ('x0', 'x4'): 0.25, ('x0', 'x5'): 0.25, 
        ('x0', 'x6'): 0.25, ('x1', 'x0'): -0.75, 
        ('x1', 'x1'): 0.25, ('x1', 'x2'): -0.625, 
        ('x1', 'x3'): 0.375, ('x1', 'x4'): 0.25, 
        ('x1', 'x5'): 0.25, ('x1', 'x6'): 0.25, 
        ('x2', 'x0'): -0.625, ('x2', 'x1'): -0.625, 
        ('x2', 'x2'): 0.5625, ('x2', 'x3'): 0.5625, 
        ('x2', 'x4'): 0.375, ('x2', 'x5'): 0.375, 
        ('x2', 'x6'): -0.625, ('x3', 'x0'): 0.375, 
        ('x3', 'x1'): 0.375, ('x3', 'x2'): 0.5625, 
        ('x3', 'x3'): 0.5625, ('x3', 'x4'): -0.625, 
        ('x3', 'x5'): -0.625, ('x3', 'x6'): -0.625, 
        ('x4', 'x0'): 0.25, ('x4', 'x1'): 0.25, 
        ('x4', 'x2'): 0.375, ('x4', 'x3'): -0.625, 
        ('x4', 'x4'): 0.25, ('x4', 'x5'): -0.75, 
        ('x4', 'x6'): 0.25, ('x5', 'x0'): 0.25, 
        ('x5', 'x1'): 0.25, ('x5', 'x2'): 0.375, 
        ('x5', 'x3'): -0.625, ('x5', 'x4'): -0.75, 
        ('x5', 'x5'): 0.25, ('x5', 'x6'): 0.25, 
        ('x6', 'x0'): 0.25, ('x6', 'x1'): 0.25, 
        ('x6', 'x2'): -0.625, ('x6', 'x3'): -0.625, 
        ('x6', 'x4'): 0.25, ('x6', 'x5'): 0.25, 
        ('x6', 'x6'): 0.25
     }
    
    assert not hasattr(problem_no_one_hot, 'constraints')
